package uk.org.whoami.authme;

import java.io.IOException;
import java.sql.SQLException;
import net.milkbowl.vault.permission.Permission;
import org.bukkit.Server;
import org.bukkit.command.PluginCommand;
import org.bukkit.entity.Player;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.plugin.ServicesManager;
import org.bukkit.plugin.java.JavaPlugin;
import uk.org.whoami.authme.commands.AdminCommand;
import uk.org.whoami.authme.commands.ChangePasswordCommand;
import uk.org.whoami.authme.commands.LoginCommand;
import uk.org.whoami.authme.commands.LogoutCommand;
import uk.org.whoami.authme.commands.RegisterCommand;
import uk.org.whoami.authme.commands.UnregisterCommand;
import uk.org.whoami.authme.datasource.CacheDataSource;
import uk.org.whoami.authme.datasource.DataSource;
import uk.org.whoami.authme.datasource.FileDataSource;
import uk.org.whoami.authme.datasource.MiniConnectionPoolManager.TimeoutException;
import uk.org.whoami.authme.datasource.MySQLDataSource;
import uk.org.whoami.authme.datasource.SqliteDataSource;
import uk.org.whoami.authme.listener.AuthMeBlockListener;
import uk.org.whoami.authme.listener.AuthMeEntityListener;
import uk.org.whoami.authme.listener.AuthMePlayerListener;
import uk.org.whoami.authme.listener.AuthMeSpoutListener;
import uk.org.whoami.authme.settings.Messages;
import uk.org.whoami.authme.settings.Settings;

public class AuthMe extends JavaPlugin
{
  private DataSource database;
  private Settings settings;
  private Utils utils;
  private Messages m;
  public Management management;
  public static Server server;
  public static Permission permission;
  private static AuthMe instance;

  public void onEnable()
  {
    instance = this;
    try
    {
      Metrics metrics = new Metrics();
      metrics.beginMeasuringPlugin(this);
    }
    catch (IOException e)
    {
    }
    this.settings = new Settings(this);
    this.settings.loadConfigOptions();

    this.m = Messages.getInstance();

    server = getServer();

    if ((Settings.isBackupActivated.booleanValue()) && (Settings.isBackupOnStart.booleanValue())) {
      Boolean Backup = Boolean.valueOf(new PerformBackup().PerformBackup());
      if (Backup.booleanValue()) ConsoleLogger.info("Backup Complete"); else {
        ConsoleLogger.showError("Error while making Backup");
      }

    }

    switch (1.$SwitchMap$uk$org$whoami$authme$datasource$DataSource$DataSourceType[Settings.getDataSource.ordinal()]) {
    case 1:
      try {
        this.database = new FileDataSource();
      } catch (IOException ex) {
        ConsoleLogger.showError(ex.getMessage());
        getServer().getPluginManager().disablePlugin(this);
        return;
      }
    case 2:
      try
      {
        this.database = new MySQLDataSource();
      } catch (ClassNotFoundException ex) {
        ConsoleLogger.showError(ex.getMessage());
        getServer().getPluginManager().disablePlugin(this);
        return;
      } catch (SQLException ex) {
        ConsoleLogger.showError(ex.getMessage());
        getServer().getPluginManager().disablePlugin(this);
        return;
      } catch (MiniConnectionPoolManager.TimeoutException ex) {
        ConsoleLogger.showError(ex.getMessage());
        getServer().getPluginManager().disablePlugin(this);
        return;
      }
    case 3:
      try
      {
        this.database = new SqliteDataSource();
      } catch (ClassNotFoundException ex) {
        ConsoleLogger.showError(ex.getMessage());
        getServer().getPluginManager().disablePlugin(this);
        return;
      } catch (SQLException ex) {
        ConsoleLogger.showError(ex.getMessage());
        getServer().getPluginManager().disablePlugin(this);
        return;
      }

    }

    if (Settings.isCachingEnabled.booleanValue()) {
      this.database = new CacheDataSource(this.database);
    }

    this.management = new Management(this.database);

    PluginManager pm = getServer().getPluginManager();
    pm.registerEvents(new AuthMePlayerListener(this, this.database), this);
    pm.registerEvents(new AuthMeBlockListener(this.database), this);
    pm.registerEvents(new AuthMeEntityListener(this.database), this);
    if (pm.isPluginEnabled("Spout")) {
      pm.registerEvents(new AuthMeSpoutListener(this.database), this);
    }

    if (Settings.isPermissionCheckEnabled.booleanValue()) {
      RegisteredServiceProvider permissionProvider = getServer().getServicesManager().getRegistration(Permission.class);

      if (permissionProvider != null) {
        permission = (Permission)permissionProvider.getProvider();
      }
      else {
        ConsoleLogger.showError("Vault and Permissions plugins is needed for enable AuthMe Reloaded!");
        getServer().getPluginManager().disablePlugin(this);
      }

    }

    getCommand("authme").setExecutor(new AdminCommand(this.database));
    getCommand("register").setExecutor(new RegisterCommand(this.database));
    getCommand("login").setExecutor(new LoginCommand());
    getCommand("changepassword").setExecutor(new ChangePasswordCommand(this.database));
    getCommand("logout").setExecutor(new LogoutCommand(this, this.database));
    getCommand("unregister").setExecutor(new UnregisterCommand(this, this.database));

    if (!Settings.isForceSingleSessionEnabled.booleanValue()) {
      ConsoleLogger.info("ATTENTION by disabling ForceSingleSession Your server protection is set to low");
    }

    ConsoleLogger.info("Authme " + getDescription().getVersion() + " enabled");
  }

  public void onDisable()
  {
    if (this.database != null) {
      this.database.close();
    }

    if ((Settings.isBackupActivated.booleanValue()) && (Settings.isBackupOnStop.booleanValue())) {
      Boolean Backup = Boolean.valueOf(new PerformBackup().PerformBackup());
      if (Backup.booleanValue()) ConsoleLogger.info("Backup Complete"); else
        ConsoleLogger.showError("Error while making Backup");
    }
    ConsoleLogger.info("Authme " + getDescription().getVersion() + " disabled");
  }

  private void onReload(Player[] players) {
    ConsoleLogger.showError("AuthMe dont support /reload command yet, please use /authme relaod");
  }

  public static AuthMe getInstance()
  {
    return instance;
  }
}
